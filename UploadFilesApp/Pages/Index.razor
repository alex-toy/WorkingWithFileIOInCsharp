@page "/"
@using UploadFilesApp.Data
@inject IConfiguration config

<PageTitle>Upload demo App</PageTitle>

<h1>Upload demo</h1>

<EditForm Model="newCustomer" OnValidSubmit="@SubmitForm">
    
    <label for="firstName">First Name :</label>
    <InputText id="firstName" class="form-control" @bind-Value="newCustomer.FirstName" />
    
    <div>
        <label for="lastName">Last Name :</label>
        <InputText id="lastName" class="form-control" @bind-Value="newCustomer.LastName" />
    </div>
    <div>
        <label for="profilePicture">Profile picture :</label>
        <InputFile id="profilePicture" class="form-control" accept=".png,.jpg,.jpeg" 
            OnChange="@LoadFileProfile" 
            @bind-Value="newCustomer.FileName" />
    </div>
    <button class="btn btn-primary mt-3" type="submit">Create Customer</button>
</EditForm>

@*<InputFile class="form-control" multiple accept=".png,.jpg,.jpeg" OnChange="@LoadFiles"/>*@

@if(errors.Count > 0)
{
    <h2>Errors</h2>
    <ul class="text-danger">
        @foreach(var error in errors)
        {
            <li>@error</li>
        }
    </ul>
} 
else if (nbFilesUploaded > 1)
{
    <h2>Files uploaded successfully</h2>
} 
else if (nbFilesUploaded > 0)
{
    <h2>File uploaded successfully</h2>
}

@code{
    private long maxFileSize = 1024*1024*3;
    private int maxAllowedFiles = 3;
    private List<string> errors = new();
    int nbFilesUploaded = 0;
    private CustomerModel newCustomer = new();
    private IBrowserFile? file;

    private async Task SubmitForm()
    {
        try
        {
            string relativePath = await CaptureFile();
            newCustomer.FileName = relativePath;
        }
        catch (Exception ex)
        {
            errors.Add(ex.Message);
        }
    }

    private void LoadFileProfile(InputFileChangeEventArgs uploadEvent)
    {
        file = uploadEvent.File;
    }

    private async Task<string> CaptureFile()
    {
        string relativePath;
        if (file is null)
        {
            return "";
        }

        try
        {
            relativePath = await LoadFileThrow(file);
            nbFilesUploaded++;
        }
        catch (Exception ex)
        {
            errors.Add($"{file.Name} -> {ex.Message}");
            throw;
        }

        return relativePath;
    }

    private async Task LoadFiles(InputFileChangeEventArgs uploadEvent)
    {
        errors.Clear();
        nbFilesUploaded = 0;

        if (uploadEvent.FileCount > maxAllowedFiles)
        {
            errors.Add("Too many files"); 
            return;
        }

        IReadOnlyList<IBrowserFile> files = uploadEvent.GetMultipleFiles(maxAllowedFiles);
        foreach(IBrowserFile file in files)
        {
            try
            {
                await LoadFileThrow(file);
                nbFilesUploaded++;
            }
            catch (Exception ex)
            {
                errors.Add($"{file.Name} -> {ex.Message}");
            }
        }
    }

    private async Task<string> LoadFileThrow(IBrowserFile file)
    {
        string randomFileName = Path.GetRandomFileName();
        string fileExtension = Path.GetExtension(file.Name);
        string newFileName = Path.ChangeExtension(randomFileName, fileExtension);

        string fileStoragePath = config.GetValue<string>("FileStorage")!;
        string suffix = "alexei";
        string relativePath = Path.Combine(suffix, newFileName);
        string path = Path.Combine(fileStoragePath, suffix, newFileName);

        string directoryPath = Path.Combine(fileStoragePath, suffix);
        Directory.CreateDirectory(directoryPath);

        await using FileStream fs = new(path, FileMode.Create);
        await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
        return relativePath;
    }
}